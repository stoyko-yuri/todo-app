import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import Input from "../components/UI/Input";
import { RiPencilLine } from "react-icons/ri";
import TodoCard from "../components/Cards/TodoCard";
import Popup from "../components/Popup";

interface todoItemTypes {
  onDate: Date;
  todo: string;
  isComplete: boolean;
}

const Home: NextPage = () => {
  const [todoList, setTodoList] = useState<todoItemTypes[]>([]);
  const [inputValue, setInputValue] = useState<string>("");
  const [togglePopup, setTogglePopup] = useState<boolean>(false);
  const [popupItem, setPopupItem] = useState<todoItemTypes>();

  const onInputChange = (eventValue: string) => {
    setInputValue(eventValue);
  };

  const onClickSubmit = (inputValue: string) => {
    if (inputValue) {
      const todoItem: todoItemTypes = {
        onDate: new Date(Date.now()),
        todo: inputValue,
        isComplete: false,
      };
      setTodoList((prevList) => [...prevList, todoItem]);
      setInputValue("");
    }
  };

  const onCompleteClick = (todoIndex: number) => {
    let todoItemChanged = todoList.filter(
      (todo, index) => index === todoIndex
    )[0];
    todoItemChanged.isComplete = true;
    setTodoList(todoList.filter((todo, index) => index !== todoIndex));
    setTodoList((prevList) => [...prevList, todoItemChanged]);
  };

  const onOpenPopup = (todoIndex: number) => {
    setTogglePopup(!togglePopup);
    setPopupItem(todoList.filter((todo, index) => index === todoIndex)[0]);
  };

  const onClosePopup = () => {
    setTogglePopup(!togglePopup);
  };

  const onRemoveClick = (todoIndex: number) => {
    setTodoList(todoList.filter((todo, index) => index !== todoIndex));
  };

  return (
    <div className="w-full min-h-screen grid items-center justify-center text-neutral-100 bg-neutral-900">
      <Head>
        <title>Todo App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="w-full grid text-center">
        <div className="w-96 grid gap-10">
          <h1 className="text-4xl">Todo app</h1>
          <div className="grid justify-center gap-4">
            <Input
              inputValue={inputValue}
              label="Your todo"
              icon={<RiPencilLine />}
              onInputChange={onInputChange}
              onClickSubmit={onClickSubmit}
            />
          </div>
          <div className="grid gap-2">
            <p>Not completed</p>
            {todoList.map((obj: todoItemTypes, index) => {
              return !obj.isComplete ? (
                <TodoCard
                  key={index}
                  todoItem={obj}
                  onCompleteClick={() => onCompleteClick(index)}
                  onTogglePopup={() => onOpenPopup(index)}
                  onRemoveClick={() => onRemoveClick(index)}
                />
              ) : null;
            })}
          </div>
          <div className="grid gap-2">
            <p>Completed</p>
            {todoList.map((obj: todoItemTypes, index) => {
              return obj.isComplete ? (
                <TodoCard
                  key={index}
                  todoItem={obj}
                  onCompleteClick={() => onCompleteClick(index)}
                  onTogglePopup={() => onOpenPopup(index)}
                  onRemoveClick={() => onRemoveClick(index)}
                />
              ) : null;
            })}
          </div>
        </div>
      </main>
      {togglePopup ? (
        <Popup todoItem={popupItem} onTogglePopup={onClosePopup} />
      ) : null}
    </div>
  );
};

export default Home;
